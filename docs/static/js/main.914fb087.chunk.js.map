{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","className","value","onChange","target","GifGridItem","title","url","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6LAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAgB,SAAAS,GAAI,OAAGP,GAAH,mBAAkBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,UAAU,eACVC,MAAQV,EACRW,SApBQ,SAACR,GAClBF,EAAcE,EAAES,OAAOF,a,QCRjBG,EAAc,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEjC,OACQ,qBAAKN,UAAU,yCAAf,SACI,qBAAKO,IAAKD,EAAKN,UAAU,gBAAgBQ,IAAKH,O,uBCLjDI,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbL,EADa,iDACkCM,UAAUF,GAD5C,8DAEAG,MAAOP,GAFP,cAEbQ,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAM,CACFC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAKa,EAAIE,OAAOC,iBAAiBhB,QATtB,kBAaZW,GAbY,4CAAH,sDCKPM,EAAU,SAAC,GAAiB,IAAfb,EAAc,EAAdA,SACtB,ECFwB,SAACA,GACzB,MAA0BpB,mBAAS,CAC/B0B,KAAK,GACLQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAW,WACPlB,EAAQC,GACPkB,MAAM,SAAAC,GACCH,EAAS,CACLV,KAAKa,EACLL,SAAQ,SAGtB,CAACd,IAEIe,EDdsBK,CAAcpB,GAA/BW,EAAZ,EAAOL,KAAaQ,EAApB,EAAoBA,QAEpB,OACI,qCACI,6BAAMd,IACJc,GAAW,aACb,qBAAKxB,UAAU,YAAf,SAEOqB,EAAOH,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAESA,GADEA,EAAIC,aEcvBW,EAzBM,WAEjB,MAAkCzC,mBAAS,CAAC,cAA5C,mBAAOoB,EAAP,KAAiBrB,EAAjB,KAEA,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAEA,6BAEQqB,EAASQ,KAAK,SAAAR,GAAQ,OAClB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCb9BsB,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.914fb087.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n    \r\n    const handleInput = (e)=>{\r\n       setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n\r\n        if( inputValue.trim().length > 3 ){\r\n            setCategories(  cats=>[inputValue, ...cats] );\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\" \r\n                className='form-control'\r\n                value={ inputValue }\r\n                onChange={ handleInput }\r\n            />\r\n            \r\n        </form>\r\n    )\r\n\r\n    \r\n}\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const GifGridItem = ({ title, url}) => {\r\n\r\n    return (       \r\n            <div className='card animate__animated animate__fadeIn'>\r\n                <img src={url} className=\"img-thumbnail\" alt={title} />\r\n            </div>\r\n       \r\n    )\r\n}\r\n","export const getGifs = async ( category)=>{\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=5&api_key=nFBCLYA9OSEOdvQtd95HqRgicur49Kep`;\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json(); \r\n    \r\n    const gifs = data.map(img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs\r\n}","// import {useEffect, useState} from 'react'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nimport { useFetchGifs } from './../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category}) => {\r\n    const {data:images, loading}=useFetchGifs( category );   \r\n    \r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>  \r\n            { loading && 'Loading...' }\r\n            <div className=\"card-grid\">        \r\n                {\r\n                   images.map(img =>(\r\n                       <GifGridItem\r\n                            key={ img.id }\r\n                            {...img}\r\n                       />\r\n                   ))\r\n               }                            \r\n             \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState,useEffect } from 'react';\r\n\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( ()=>{\r\n        getGifs(category)\r\n        .then( imgs =>{            \r\n                setState({\r\n                    data:imgs,\r\n                    loading:false\r\n                })            \r\n        })  \r\n    },[category] )\r\n\r\n    return state\r\n}\r\n","import {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [category, setCategories] = useState(['One Punch'])\r\n\r\n    return (\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories} />\r\n\r\n        <hr/>\r\n        \r\n        <ol>\r\n            {\r\n                category.map( category=>(\r\n                    <GifGrid \r\n                        key={ category }\r\n                        category={ category }\r\n                    />\r\n                ) )\r\n            }\r\n        </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css'\n\n\nReactDOM.render(\n \n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}